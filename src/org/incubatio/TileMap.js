/**
 * Generated by Apache Royale Compiler from org/incubatio/TileMap.as
 * org.incubatio.TileMap
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.incubatio.TileMap');

goog.require('io.nfg.core.Pos');
goog.require('io.nfg.wmg.models.SpecialTile');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @param {number} cols
 * @param {number} rows
 * @param {Object=} options
 */
org.incubatio.TileMap = function(cols, rows, options) {
  options = typeof options !== 'undefined' ? options : null;
  
  this._specialTiles = {};
  var /** @type {number} */ i, /** @type {number} */ j;
  options = options || {};
  var /** @type {Object} */ tiledData = options.tiled || {};
  this._cols = cols;
  this._rows = rows;
  this._collisionGrid = org.apache.royale.utils.Language.Vector();
  for (j = 0; j < this._allowedTileDims; j++) {
    this._collisionGrid[j] = [];
    for (i = 0; i < this._rows; i++) {
      this._collisionGrid[j][i] = [];
    }
  }
  this._specialGrid = org.apache.royale.utils.Language.Vector();
  for (j = 0; j < this._allowedTileDims; j++) {
    this._specialGrid[j] = [];
    for (i = 0; i < this._rows; i++) {
      this._specialGrid[j][i] = [];
    }
  }
  this._emptyCollisionGrid = [];
  for (i = 0; i < this._rows; i++) {
    this._emptyCollisionGrid[i] = [];
  }
  if (options.doSetupBorders)
    this.setupBorders();
  if (tiledData.layers) {
    this._collisionLayerName = org.apache.royale.utils.Language.string(options.collisionLayerName || "collision");
    this._layers = {};
    for (i = 0; i < options.layers.length; i++) {
      this._layers[options.layers[i].name] = options.layers[i];
    }
  }
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.incubatio.TileMap', org.incubatio.TileMap);


/**
 * @protected
 * @type {number}
 */
org.incubatio.TileMap.prototype._cols;


/**
 * @protected
 * @type {number}
 */
org.incubatio.TileMap.prototype._rows;


/**
 * @protected
 * @type {string}
 */
org.incubatio.TileMap.prototype._collisionLayerName;


/**
 * @protected
 * @type {Object}
 */
org.incubatio.TileMap.prototype._layers;


/**
 * @protected
 * @type {number}
 */
org.incubatio.TileMap.prototype._allowedTileDims = 2;


/**
 * @protected
 * @type {Array}
 */
org.incubatio.TileMap.prototype._collisionGrid;


/**
 * @protected
 * @type {Array}
 */
org.incubatio.TileMap.prototype._specialGrid;


/**
 * @protected
 * @type {Object}
 */
org.incubatio.TileMap.prototype._specialTiles;


/**
 * @protected
 * @type {Array}
 */
org.incubatio.TileMap.prototype._emptyCollisionGrid;


/**
 * Get tile position on a tile grid from a gid. If @point is not null than the method is going to use it instead of creating a new Pos object
 * @asparam gid
 * @asparam point
 * @asreturn
 * @export
 * @param {number} gid
 * @param {io.nfg.core.Pos=} point
 * @return {io.nfg.core.Pos}
 */
org.incubatio.TileMap.prototype.gid2TilePos = function(gid, point) {
  var self = this;
  point = typeof point !== 'undefined' ? point : null;
  var /** @type {Function} */ __localFn0__ = function(i, width) {
    return (i % width == 0) ? width - 1 : (i % width) - 1;
  }
  var /** @type {Function} */ getX = __localFn0__;
  var /** @type {number} */ x = Number((gid == 0) ? 0 : getX(gid + 1, this._cols));
  var /** @type {number} */ y = Math.floor(gid / this._cols);
  if (point != null) {
    point.setTo(x, y);
    return point;
  }
  return new io.nfg.core.Pos(x, y);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
org.incubatio.TileMap.prototype.tilePos2Gid = function(x, y) {
  return (y * this._cols) + x;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
org.incubatio.TileMap.prototype.isOutOfBounds = function(x, y) {
  return x <= 0 || x >= this._cols || y <= 0 || y >= this._rows;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
org.incubatio.TileMap.prototype.isOutOfUsableBounds = function(x, y) {
  return (x < 1 || x > this._cols - 2 || y < 1 || y > this._rows - 2);
};


/**
 * Blocks all tiles around the actuall tilemap so the AStar search algorithm wont
 * search outside tilemap bounds
 * @private
 */
org.incubatio.TileMap.prototype.setupBorders = function() {
  var /** @type {number} */ i;
  var /** @type {number} */ x, /** @type {number} */ y;
  for (var /** @type {number} */ dim = 0; dim < this._allowedTileDims; dim++) {
    for (i = 0; i < this._rows; i++) {
      this._collisionGrid[dim][i][0] = 100000;
      this._emptyCollisionGrid[i][0] = 100000;
      this._collisionGrid[dim][i][this._cols - 1] = 100000;
      this._emptyCollisionGrid[i][this._cols - 1] = 100000;
      if (dim == 1)
        this._collisionGrid[dim][i][this._cols - 2] = 100000;
    }
    for (i = 0; i < this._cols; i++) {
      this._collisionGrid[dim][0][i] = 100000;
      this._emptyCollisionGrid[0][i] = 100000;
      this._collisionGrid[dim][this._rows - 1][i] = 100000;
      this._emptyCollisionGrid[this._rows - 1][i] = 100000;
      if (dim == 1)
        this._collisionGrid[dim][this._rows - 2][i] = 100000;
    }
  }
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number=} blockingObjectDim
 * @param {number=} initValue
 */
org.incubatio.TileMap.prototype.setTileToOccupied = function(x, y, blockingObjectDim, initValue) {
  blockingObjectDim = typeof blockingObjectDim !== 'undefined' ? blockingObjectDim : 1;
  initValue = typeof initValue !== 'undefined' ? initValue : 1;
  for (var /** @type {number} */ dim = 0; dim < this._allowedTileDims; dim++) {
    for (var /** @type {number} */ row = -dim; row < blockingObjectDim; row++) {
      for (var /** @type {number} */ col = -dim; col < blockingObjectDim; col++) {
        if (x + col > -1 && y + row > -1) {
          if (org.apache.royale.utils.Language.is(this._collisionGrid[dim][y + row][x + col], Number))
            this._collisionGrid[dim][y + row][x + col]++;
          else
            this._collisionGrid[dim][y + row][x + col] = initValue;
        }
      }
    }
  }
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number=} blockingObjectDim
 */
org.incubatio.TileMap.prototype.setTileToFree = function(x, y, blockingObjectDim) {
  blockingObjectDim = typeof blockingObjectDim !== 'undefined' ? blockingObjectDim : 1;
  for (var /** @type {number} */ dim = 0; dim < this._allowedTileDims; dim++) {
    for (var /** @type {number} */ row = -dim; row < blockingObjectDim; row++) {
      for (var /** @type {number} */ col = -dim; col < blockingObjectDim; col++) {
        if (org.apache.royale.utils.Language.is(this._collisionGrid[dim][y + row][x + col], Number)) {
          this._collisionGrid[dim][y + row][x + col]--;
          if (this._collisionGrid[dim][y + row][x + col] < 1)
            this._collisionGrid[dim][y + row][x + col] = null;
        }
      }
    }
  }
};


/**
 * Checks whether tile is occupied or not in given dimension
 * @asparam x
 * @asparam y
 * @asparam dim Size of the tile square
 * @asreturn TRUE if tile is occupied and FALSE if it is not
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number=} dim
 * @return {boolean}
 */
org.incubatio.TileMap.prototype.isOccupied = function(x, y, dim) {
  dim = typeof dim !== 'undefined' ? dim : 1;
  return this._collisionGrid[dim - 1][y][x] != null;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {string} type
 */
org.incubatio.TileMap.prototype.setSpecialTile = function(x, y, type) {
  var /** @type {number} */ objectDim = 2;
  var /** @type {io.nfg.wmg.models.SpecialTile} */ specialTile = new io.nfg.wmg.models.SpecialTile(x, y, type);
  var /** @type {number} */ gid = this.tilePos2Gid(x, y);
  if (this._specialTiles[gid])
    org.apache.royale.utils.Language.trace('[WARNING] Special tile at ' + x + ',' + y + ' is already set');
  this._specialTiles[gid] = specialTile;
  for (var /** @type {number} */ dim = 0; dim < this._allowedTileDims; dim++) {
    for (var /** @type {number} */ row = -dim; row < objectDim; row++) {
      for (var /** @type {number} */ col = -dim; col < objectDim; col++) {
        if (x + col > -1 && y + row > -1) {
          this._specialGrid[dim][y + row][x + col] = specialTile;
        }
      }
    }
  }
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number=} dim
 * @return {io.nfg.wmg.models.SpecialTile}
 */
org.incubatio.TileMap.prototype.getSpecialTile = function(x, y, dim) {
  dim = typeof dim !== 'undefined' ? dim : 1;
  return this._specialGrid[dim - 1][y][x];
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number=} dim
 * @return {boolean}
 */
org.incubatio.TileMap.prototype.isSpecialTile = function(x, y, dim) {
  dim = typeof dim !== 'undefined' ? dim : 1;
  return this.getSpecialTile(x, y, dim) != null;
};


org.incubatio.TileMap.prototype.get__specialTiles = function() {
  return this._specialTiles;
};


org.incubatio.TileMap.prototype.get__cols = function() {
  return this._cols;
};


org.incubatio.TileMap.prototype.get__rows = function() {
  return this._rows;
};


org.incubatio.TileMap.prototype.get__collisionGrid = function() {
  return this._collisionGrid;
};


org.incubatio.TileMap.prototype.get__specialGrid = function() {
  return this._specialGrid;
};


org.incubatio.TileMap.prototype.get__emptyCollisionGrid = function() {
  return this._emptyCollisionGrid;
};


Object.defineProperties(org.incubatio.TileMap.prototype, /** @lends {org.incubatio.TileMap.prototype} */ {
/**
  * @export
  * @type {Object} */
specialTiles: {
get: org.incubatio.TileMap.prototype.get__specialTiles},
/**
  * @export
  * @type {number} */
cols: {
get: org.incubatio.TileMap.prototype.get__cols},
/**
  * @export
  * @type {number} */
rows: {
get: org.incubatio.TileMap.prototype.get__rows},
/**
  * @export
  * @type {Vector.<Array>} */
collisionGrid: {
get: org.incubatio.TileMap.prototype.get__collisionGrid},
/**
  * @export
  * @type {Vector.<Array>} */
specialGrid: {
get: org.incubatio.TileMap.prototype.get__specialGrid},
/**
  * @export
  * @type {Array} */
emptyCollisionGrid: {
get: org.incubatio.TileMap.prototype.get__emptyCollisionGrid}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.incubatio.TileMap.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TileMap', qName: 'org.incubatio.TileMap', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.incubatio.TileMap.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'specialTiles': { type: 'Object', access: 'readonly', declaredBy: 'org.incubatio.TileMap'},
        'cols': { type: 'Number', access: 'readonly', declaredBy: 'org.incubatio.TileMap'},
        'rows': { type: 'Number', access: 'readonly', declaredBy: 'org.incubatio.TileMap'},
        'collisionGrid': { type: 'Vector.<Array>', access: 'readonly', declaredBy: 'org.incubatio.TileMap'},
        'specialGrid': { type: 'Vector.<Array>', access: 'readonly', declaredBy: 'org.incubatio.TileMap'},
        'emptyCollisionGrid': { type: 'Array', access: 'readonly', declaredBy: 'org.incubatio.TileMap'}
      };
    },
    methods: function () {
      return {
        'TileMap': { type: '', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Object', optional: true } ]; }},
        'gid2TilePos': { type: 'io.nfg.core.Pos', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'io.nfg.core.Pos', optional: true } ]; }},
        'tilePos2Gid': { type: 'Number', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'isOutOfBounds': { type: 'Boolean', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'isOutOfUsableBounds': { type: 'Boolean', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'setTileToOccupied': { type: 'void', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true },{ index: 4, type: 'Number', optional: true } ]; }},
        'setTileToFree': { type: 'void', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true } ]; }},
        'isOccupied': { type: 'Boolean', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true } ]; }},
        'setSpecialTile': { type: 'void', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'String', optional: false } ]; }},
        'getSpecialTile': { type: 'io.nfg.wmg.models.SpecialTile', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true } ]; }},
        'isSpecialTile': { type: 'Boolean', declaredBy: 'org.incubatio.TileMap', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true } ]; }}
      };
    }
  };
};