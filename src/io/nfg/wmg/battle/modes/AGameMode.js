/**
 * Generated by Apache Royale Compiler from io/nfg/wmg/battle/modes/AGameMode.as
 * io.nfg.wmg.battle.modes.AGameMode
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.wmg.battle.modes.AGameMode');

goog.require('io.nfg.wmg.battle.BattleLogic');
goog.require('org.incubatio.Entity');
goog.require('io.nfg.wmg.battle.modes.IGameMode');



/**
 * @constructor
 * @implements {io.nfg.wmg.battle.modes.IGameMode}
 * @param {Object} mode
 * @param {io.nfg.wmg.battle.BattleLogic} battle
 */
io.nfg.wmg.battle.modes.AGameMode = function(mode, battle) {
  this.battle = battle;
  this.name = org.apache.royale.utils.Language.string(mode.name);
  this.group = org.apache.royale.utils.Language.string(mode.group);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.wmg.battle.modes.AGameMode', io.nfg.wmg.battle.modes.AGameMode);


/**
 * @export
 * @type {string}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.name;


/**
 * @export
 * @type {string}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.group;


/**
 * @export
 * @type {io.nfg.wmg.battle.BattleLogic}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.battle;


/**
 * @export
 * @param {number} pIndex
 * @return {boolean}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.didGameEnded = function(pIndex) {
  return false;
};


/**
 * @export
 * @param {number} pIndex
 * @return {boolean}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.didPlayerWin = function(pIndex) {
  return false;
};


/**
 * @export
 * @return {string}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.checkTrigger = function() {
  return '';
};


/**
 * @export
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.start = function() {
};


/**
 * @export
 * @return {number}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.getAlivePlayerCount = function() {
  var /** @type {number} */ playerInGameCounter = 0;
  var /** @type {Array} */ group;
  var foreachiter0_target = this.battle.aliveGroups;
  for (var foreachiter0 in foreachiter0_target) 
  {
  group = foreachiter0_target[foreachiter0];
  {
    if (group.length > 0)
      playerInGameCounter++;
  }}
  
  return playerInGameCounter;
};


/**
 * @export
 * @param {number} pIndex
 * @return {boolean}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.isEnemyAlive = function(pIndex) {
  var /** @type {boolean} */ isAlive = false;
  var /** @type {number} */ i;
  for (i in this.battle.aliveGroups) {
    if (pIndex != i && this.battle.aliveGroups[i].length > 0)
      isAlive = true;
  }
  return isAlive;
};


/**
 * @export
 * @param {number} pIndex
 * @return {boolean}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.isPlayerAlive = function(pIndex) {
  return this.battle.aliveGroups[pIndex].length > 0;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AGameMode', qName: 'io.nfg.wmg.battle.modes.AGameMode', kind: 'class' }], interfaces: [io.nfg.wmg.battle.modes.IGameMode] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.wmg.battle.modes.AGameMode.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'name': { type: 'String'},
        'group': { type: 'String'},
        'battle': { type: 'io.nfg.wmg.battle.BattleLogic'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'didGameEnded': { type: 'Boolean', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'didPlayerWin': { type: 'Boolean', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'checkTrigger': { type: 'String', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode'},
        'start': { type: 'void', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode'},
        'AGameMode': { type: '', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode', parameters: function () { return [  { index: 1, type: 'Object', optional: false },{ index: 2, type: 'io.nfg.wmg.battle.BattleLogic', optional: false } ]; }},
        'getAlivePlayerCount': { type: 'Number', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode'},
        'isEnemyAlive': { type: 'Boolean', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'isPlayerAlive': { type: 'Boolean', declaredBy: 'io.nfg.wmg.battle.modes.AGameMode', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }}
      };
    }
  };
};