/**
 * Generated by Apache Royale Compiler from io/nfg/wmg/helpers/QuestHelper.as
 * io.nfg.wmg.helpers.QuestHelper
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.wmg.helpers.QuestHelper');

goog.require('io.nfg.wmg.models.DeckUnit');
goog.require('io.nfg.wmg.utils.Resources');



/**
 * @constructor
 */
io.nfg.wmg.helpers.QuestHelper = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.wmg.helpers.QuestHelper', io.nfg.wmg.helpers.QuestHelper);


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getQuestIndexFromMissionId = function(id) {
  return Number(id.substr(0, id.length - 1).substr(2));
};


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getQuestIndexFromQuestId = function(id) {
  return Number(id.substr(2));
};


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getQuestIdFromMissionId = function(id) {
  return Number(id.substr(0, id.length - 1));
};


/**
 * @export
 * @param {number} specieIndex
 * @param {number} npcIndex
 * @return {string}
 */
io.nfg.wmg.helpers.QuestHelper.getNpcFileName = function(specieIndex, npcIndex) {
  return io.nfg.wmg.helpers.QuestHelper["specieNames"][specieIndex].substr(0, 1) + '_' + io.nfg.wmg.helpers.QuestHelper["npcNames"][npcIndex];
};


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getSpecieIndex = function(id) {
  return Number(id.substr(0, 1));
};


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getNpcIndex = function(id) {
  return Number(id.substr(1, 1));
};


/**
 * @export
 * @param {string} id
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getMissionIndex = function(id) {
  return Number(id.substr(-1, 1));
};


/**
 * @export
 * @param {number} idRaw
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.parseMissionId = function(idRaw) {
  var /** @type {string} */ id = "" + idRaw;
  var /** @type {Object} */ r = {specieIndex:io.nfg.wmg.helpers.QuestHelper.getSpecieIndex(id), npcIndex:io.nfg.wmg.helpers.QuestHelper.getNpcIndex(id), questIndex:io.nfg.wmg.helpers.QuestHelper.getQuestIndexFromMissionId(id), missionIndex:io.nfg.wmg.helpers.QuestHelper.getMissionIndex(id), questId:io.nfg.wmg.helpers.QuestHelper.getQuestIdFromMissionId(id)};
  r.npcFileName = io.nfg.wmg.helpers.QuestHelper.getNpcFileName(r.specieIndex, r.npcIndex);
  return r;
};


/**
 * @export
 * @param {number} idRaw
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.parseQuestId = function(idRaw) {
  var /** @type {string} */ id = "" + idRaw;
  var /** @type {Object} */ r = {specieIndex:io.nfg.wmg.helpers.QuestHelper.getSpecieIndex(id), npcIndex:io.nfg.wmg.helpers.QuestHelper.getNpcIndex(id), questIndex:io.nfg.wmg.helpers.QuestHelper.getQuestIndexFromQuestId(id)};
  r.npcFileName = io.nfg.wmg.helpers.QuestHelper.getNpcFileName(r.specieIndex, r.npcIndex);
  return r;
};


/**
 * @private
 * @const
 * @type {Object}
 */
io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__defaultQuest = {label:'Generic battle', ctx:'Lorem lipsum', prize:100, missions:[{text:'dolor el mama.'}], menu:'About Mission ?', info_loc:'No time to talk, just go !', info:['What about the mission ?', [['finish', "job's done, i want my reward."], ['info_loc', 'Any more info about the mission ?'], ['root', 'what were we talking about before ?']]], finish:"well done, here is your prize #prize gold", not_finish:'No time to joke, just go !', start:["generated mission", [["negociate", "yes, but at a price."], ["refuse", "No."]]], accept:"good let's go", refuse:"well ok, come back later if you change your mind"};


/**
 * @private
 * @const
 * @type {Object}
 */
io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__defaultMission = {title:'The Awakening', desc:'you awake on an island near shipwreck, you spot what seem to be a hostile creature', type:'puzzle', instructions:'Win this turn', objectives:[{name:"annihilation", pIndex:0}], actors:[{name:'player', deck:[["pikeman", 6, 'u', {pos:[1, 2], name:'target', applyStatuses:['tuto_slowed']}], ["pikeman", 6, 'u', {pos:[1, 3], name:'target', applyStatuses:['tuto_slowed']}], ["pikeman", 6, 'u', {pos:[1, 4], name:'target', applyStatuses:['tuto_slowed']}]]}], map:{environment:"forest", collisions:["WWWWWWWWWWWWWW", "W............W", "W............W", "W............W", "W............W", "W............W", "W............W", "W............W", "W............W", "WWWWWWWWWWWWWW"]}};


/**
 * @export
 * @param {Object} mp
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.getQuestConfig = function(mp) {
  var /** @type {Object} */ questConfig;
  questConfig = io.nfg.wmg.helpers.QuestHelper["npcs"][mp.npcFileName].quests[mp.questIndex];
  if (!questConfig)
    questConfig = io.nfg.wmg.helpers.QuestHelper.generateQuest(mp.questIndex);
  return questConfig;
};


/**
 * @export
 * @param {number} missionId
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.getMissionConfig = function(missionId) {
  var /** @type {Object} */ mp = io.nfg.wmg.helpers.QuestHelper.parseMissionId(missionId);
  return io.nfg.wmg.helpers.QuestHelper.isRngQuest(mp.questId) ? io.nfg.wmg.helpers.QuestHelper.generateMission(mp.questId) : io.nfg.wmg.helpers.QuestHelper["missions"][missionId];
};


/**
 * @export
 * @param {string} seed
 * @param {number} specieIndex
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.generateMap = function(seed, specieIndex) {
  var /** @type {Function} */ __localFn0__ = function(a, b, c) {
    return Number(a);
  }
  var /** @type {number} */ w, /** @type {number} */ h, /** @type {number} */ i, /** @type {number} */ j;
  var /** @type {Array} */ layout;
  var /** @type {Array} */ seedIntAr = seed.split("").map(__localFn0__);
  var /** @type {number} */ seedInt = Number(seed);
  w = Number(io.nfg.wmg.helpers.QuestHelper["terrains"].min[0] + seedInt % io.nfg.wmg.helpers.QuestHelper["terrains"].grow[0] );
  h = Number(io.nfg.wmg.helpers.QuestHelper["terrains"].min[1] + seedInt % io.nfg.wmg.helpers.QuestHelper["terrains"].grow[1] );
  layout = new Array(h);
  var /** @type {number} */ tw = Number(io.nfg.wmg.helpers.QuestHelper["terrains"].templates[0][0].length);
  var /** @type {number} */ templateNum = Math.ceil(w / tw) * Math.ceil(h / tw);
  var /** @type {Array} */ templates = new Array(templateNum);
  for (i = 0; i < templateNum; i++) {
    j = i + 1;
    templates[i] = io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper_getTemplate(seedIntAr[i % seedIntAr.length] * 10 + seedIntAr[j % seedIntAr.length]);
  }
  var /** @type {Array} */ template;
  var /** @type {number} */ w2;
  w2 = Math.ceil(w / tw);
  for (j = 0; j < h; j++) {
    layout[j] = "";
    for (i = 0; i < w; i++) {
      template = templates[Math.floor(j / tw) * w2 + Math.floor(i / tw)];
      if (i == 0 || i == 1 || i == w - 1 || i == w - 2)
        layout[j] += '.';
      else if (i == w - 3 && template[j % tw].charAt(i % tw) == 2)
        layout[j] += '.';
      else
        layout[j] += template[j % tw].charAt(i % tw);
    }
  }
  layout.unshift("");
  layout.push("");
  for (j = 0; j < h + 2; j++) {
    if (j == 0 || j == h + 1)
      for (i = 0; i < w + 2; i++)
        layout[j] += 'W';
    else
      layout[j] = 'W' + layout[j] + 'W';
  }
  return {environment:io.nfg.wmg.helpers.QuestHelper["terrains"].types[specieIndex - 1], collisions:layout};
};


/**
 * @private
 * @param {number} lvl
 * @param {number} elem
 * @return {string}
 */
io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__generateUpgrades = function(lvl, elem) {
  var /** @type {number} */ k, /** @type {number} */ l;
  var /** @type {string} */ upgrades = "";
  l = lvl - 1 + (elem % 3);
  for (k = 1; k < l; k++) {
    if (k != 1)
      upgrades += "-";
    upgrades += org.apache.royale.utils.Language.string(Math.floor(k / 2) * 2 + k);
  }
  return upgrades;
};


/**
 * @export
 * @param {string} seed
 * @param {number} specieIndex
 * @return {Array}
 */
io.nfg.wmg.helpers.QuestHelper.generateDeck = function(seed, specieIndex) {
  var /** @type {Function} */ __localFn0__ = function(a, b, c) {
    return Number(a);
  }
  var /** @type {Array} */ deck = [];
  var /** @type {number} */ unitTokenCount = 0;
  var /** @type {number} */ unitIndex;
  var /** @type {string} */ unitType;
  var /** @type {number} */ i, /** @type {number} */ j;
  var /** @type {Array} */ seedIntAr = seed.split("").map(__localFn0__);
  var /** @type {number} */ lvl = Number(seedIntAr[seedIntAr.length - 1]);
  if (lvl < 1)
    throw new Error('squad avg lvl can\'t be inferior to 1');
  j = i = 0;
  deck.push([io.nfg.wmg.helpers.QuestHelper["unitsConf"].generals[specieIndex], , io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__generateUpgrades(lvl, seedIntAr[j])]);
  while (unitTokenCount < 5) {
    unitIndex = (seedIntAr[j++] + i) % io.nfg.wmg.helpers.QuestHelper["unitsConf"].unitTypes[specieIndex].length;
    unitType = org.apache.royale.utils.Language.string(io.nfg.wmg.helpers.QuestHelper["unitsConf"].unitTypes[specieIndex][unitIndex]);
    if (unitTokenCount == 6 && io.nfg.wmg.helpers.QuestHelper.getSize(unitType) != 1) {
      unitType = null;
      i++;
    }
    if (unitType) {
      deck.push([unitType, , io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__generateUpgrades(lvl, seedIntAr[j])]);
      unitTokenCount += io.nfg.wmg.helpers.QuestHelper.getSize(unitType);
    }
  }
  return deck;
};


/**
 * @export
 * @param {number} questId
 * @return {string}
 */
io.nfg.wmg.helpers.QuestHelper.getSeedFromQuestId = function(questId) {
  return String(questId).substr(2);
};


/**
 * @export
 * @param {number} questId
 * @param {boolean=} generateText
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.generateQuest = function(questId, generateText) {
  generateText = typeof generateText !== 'undefined' ? generateText : true;
  var /** @type {Object} */ quest = generateText ? JSON.parse(JSON.stringify(io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__defaultQuest)) : {};
  var /** @type {Object} */ mp = io.nfg.wmg.helpers.QuestHelper.parseQuestId(questId);
  var /** @type {string} */ seed = io.nfg.wmg.helpers.QuestHelper.getSeedFromQuestId(questId);
  var /** @type {Array} */ deck = io.nfg.wmg.helpers.QuestHelper.generateDeck(seed, mp.specieIndex);
  var /** @type {number} */ prize = 0;
  return quest;
};


/**
 * @export
 * @param {number} questId
 * @return {Object}
 */
io.nfg.wmg.helpers.QuestHelper.generateMission = function(questId) {
  var /** @type {Object} */ mission = {};
  var /** @type {Object} */ mp = io.nfg.wmg.helpers.QuestHelper.parseQuestId(questId);
  var /** @type {string} */ seed = io.nfg.wmg.helpers.QuestHelper.getSeedFromQuestId(questId);
  mission.actors = [{name:'player', deck:io.nfg.wmg.helpers.QuestHelper.generateDeck(seed, mp.specieIndex)}];
  mission.map = io.nfg.wmg.helpers.QuestHelper.generateMap(seed, mp.specieIndex);
  mission.objectives = io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper__defaultMission.objectives;
  return mission;
};


/**
 * @private
 * @param {number} pair
 * @return {Array}
 */
io.nfg.wmg.helpers.QuestHelper.io_nfg_wmg_helpers_QuestHelper_getTemplate = function(pair) {
  var /** @type {number} */ buff, /** @type {number} */ i;
  var /** @type {Array} */ template;
  buff = pair % io.nfg.wmg.helpers.QuestHelper["terrains"].templates.length;
  template = io.nfg.wmg.helpers.QuestHelper["terrains"].templates[buff].concat();
  buff = pair % 4;
  for (i = 0; i < buff; i++)
    io.nfg.wmg.helpers.QuestHelper.rotateTemplate(template);
  return template;
};


/**
 * @export
 * @param {Array} matrix
 * @return {Array}
 */
io.nfg.wmg.helpers.QuestHelper.rotateTemplate = function(matrix) {
  var /** @type {Array} */ ret = [];
  var /** @type {number} */ i, /** @type {number} */ j;
  for (i = 0; i < matrix.length; i++) {
    ret[i] = [];
    for (j = 0; j < matrix[i].length; j++) {
      ret[i][j] = matrix[matrix[i].length - j - 1].charAt(i);
      if (ret[i][j] == "2") {
        ret[i][j - 1] = "2";
        ret[i][j] = "X";
      }
    }
    ret[i] = ret[i].join("");
  }
  return ret;
};


/**
 * @export
 * @param {Array} units
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.calculateAllyTribute = function(units) {
  var /** @type {io.nfg.wmg.models.DeckUnit} */ deckUnit;
  var /** @type {number} */ tribute = 0;
  var foreachiter0_target = units;
  for (var foreachiter0 in foreachiter0_target) 
  {
  deckUnit = foreachiter0_target[foreachiter0];
  {
    tribute += io.nfg.wmg.helpers.QuestHelper["unitsConf"].ally_tributes[deckUnit.getLevel()] * deckUnit.dim;
  }}
  
  return Math.floor(tribute);
};


/**
 * @export
 * @param {Array} units
 * @param {number} prizeRng
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.calculateEnemyPrize = function(units, prizeRng) {
  var /** @type {io.nfg.wmg.models.DeckUnit} */ deckUnit;
  var /** @type {number} */ prize = 0;
  var foreachiter1_target = units;
  for (var foreachiter1 in foreachiter1_target) 
  {
  deckUnit = foreachiter1_target[foreachiter1];
  
    prize += io.nfg.wmg.helpers.QuestHelper["unitsConf"].enemy_prizes[deckUnit.getLevel()] * deckUnit.dim;}
  
  prizeRng = prizeRng || 0;
  if (prizeRng > .4)
    prize *= prizeRng < .7 ? 1.1 : .9;
  return Math.floor(prize);
};


/**
 * @export
 * @param {Array} deck
 * @param {number} prizeRng
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.calculateEnemyPrize2 = function(deck, prizeRng) {
  var /** @type {Array} */ unit;
  var /** @type {Array} */ deckUnits = [];
  var foreachiter2_target = deck;
  for (var foreachiter2 in foreachiter2_target) 
  {
  unit = foreachiter2_target[foreachiter2];
  
    deckUnits.push(new io.nfg.wmg.models.DeckUnit({type:unit[0], upgrades:unit[2]}));}
  
  return io.nfg.wmg.helpers.QuestHelper.calculateEnemyPrize(deckUnits, prizeRng);
};


/**
 * @export
 * @param {number} questId
 * @param {number} prizeRng
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getPrizeFromQuestId = function(questId, prizeRng) {
  var /** @type {Object} */ mp = io.nfg.wmg.helpers.QuestHelper.parseQuestId(questId);
  var /** @type {string} */ seed = io.nfg.wmg.helpers.QuestHelper.getSeedFromQuestId(questId);
  var /** @type {Object} */ missionConfig;
  var /** @type {number} */ prize = 0;
  var /** @type {Array} */ deck;
  var /** @type {number} */ i;
  if (io.nfg.wmg.helpers.QuestHelper.isRngQuest(questId)) {
    deck = io.nfg.wmg.helpers.QuestHelper.generateDeck(seed, mp.specieIndex);
    prize = io.nfg.wmg.helpers.QuestHelper.calculateEnemyPrize2(deck, prizeRng);
  } else {
    var /** @type {Object} */ questConfig = io.nfg.wmg.helpers.QuestHelper["npcs"][mp.npcFileName].quests[mp.questIndex];
    if (!questConfig)
      throw "Quest does not exists";
    for (i in questConfig.missions) {
      missionConfig = io.nfg.wmg.helpers.QuestHelper["missions"]["" + questId + i];
      deck = missionConfig.actors[missionConfig.actors.length > 1 ? 1 : 0].deck;
      prize += io.nfg.wmg.helpers.QuestHelper.calculateEnemyPrize2(deck, prizeRng);
    }
  }
  return prize;
};


/**
 * @export
 * @param {number} questId
 * @return {boolean}
 */
io.nfg.wmg.helpers.QuestHelper.isRngQuest = function(questId) {
  return questId > 99999;
};


/**
 * @export
 * @param {string} type
 * @return {number}
 */
io.nfg.wmg.helpers.QuestHelper.getSize = function(type) {
  return io.nfg.wmg.utils.Resources.configs.logics.units[type].size || 1;
};


io.nfg.wmg.helpers.QuestHelper.get__unitsConf = function() {
  return io.nfg.wmg.utils.Resources.configs.logics.units;
};


io.nfg.wmg.helpers.QuestHelper.get__terrains = function() {
  return io.nfg.wmg.utils.Resources.configs.logics.terrains;
};


io.nfg.wmg.helpers.QuestHelper.get__npcs = function() {
  return io.nfg.wmg.utils.Resources.configs.langs.npcs;
};


io.nfg.wmg.helpers.QuestHelper.get__missions = function() {
  return io.nfg.wmg.utils.Resources.configs.missions;
};


io.nfg.wmg.helpers.QuestHelper.get__specieNames = function() {
  return io.nfg.wmg.utils.Resources.configs.graphics.menus.specieNames;
};


io.nfg.wmg.helpers.QuestHelper.get__npcNames = function() {
  return io.nfg.wmg.utils.Resources.configs.graphics.menus.npcNames;
};


Object.defineProperties(io.nfg.wmg.helpers.QuestHelper, /** @lends {io.nfg.wmg.helpers.QuestHelper} */ {
/**
  * @export
  * @type {Object} */
unitsConf: {
get: io.nfg.wmg.helpers.QuestHelper.get__unitsConf},
/**
  * @export
  * @type {Object} */
terrains: {
get: io.nfg.wmg.helpers.QuestHelper.get__terrains},
/**
  * @export
  * @type {Object} */
npcs: {
get: io.nfg.wmg.helpers.QuestHelper.get__npcs},
/**
  * @export
  * @type {Object} */
missions: {
get: io.nfg.wmg.helpers.QuestHelper.get__missions},
/**
  * @export
  * @type {Array} */
specieNames: {
get: io.nfg.wmg.helpers.QuestHelper.get__specieNames},
/**
  * @export
  * @type {Array} */
npcNames: {
get: io.nfg.wmg.helpers.QuestHelper.get__npcNames}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.wmg.helpers.QuestHelper.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'QuestHelper', qName: 'io.nfg.wmg.helpers.QuestHelper', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.wmg.helpers.QuestHelper.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        '|unitsConf': { type: 'Object', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'},
        '|terrains': { type: 'Object', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'},
        '|npcs': { type: 'Object', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'},
        '|missions': { type: 'Object', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'},
        '|specieNames': { type: 'Array', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'},
        '|npcNames': { type: 'Array', access: 'readonly', declaredBy: 'io.nfg.wmg.helpers.QuestHelper'}
      };
    },
    methods: function () {
      return {
        '|getQuestIndexFromMissionId': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|getQuestIndexFromQuestId': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|getQuestIdFromMissionId': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|getNpcFileName': { type: 'String', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|getSpecieIndex': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|getNpcIndex': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|getMissionIndex': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|parseMissionId': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|parseQuestId': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|getQuestConfig': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        '|getMissionConfig': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|generateMap': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|generateDeck': { type: 'Array', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|getSeedFromQuestId': { type: 'String', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|generateQuest': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Boolean', optional: true } ]; }},
        '|generateMission': { type: 'Object', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|rotateTemplate': { type: 'Array', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Array', optional: false } ]; }},
        '|calculateAllyTribute': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Vector.<io.nfg.wmg.models.DeckUnit>', optional: false } ]; }},
        '|calculateEnemyPrize': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Vector.<io.nfg.wmg.models.DeckUnit>', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|calculateEnemyPrize2': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Array', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|getPrizeFromQuestId': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        '|isRngQuest': { type: 'Boolean', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        '|getSize': { type: 'Number', declaredBy: 'io.nfg.wmg.helpers.QuestHelper', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }, metadata: function () { return [  ]; }}
      };
    }
  };
};
