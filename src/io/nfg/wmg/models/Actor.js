/**
 * Generated by Apache Royale Compiler from io/nfg/wmg/models/Actor.as
 * io.nfg.wmg.models.Actor
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.wmg.models.Actor');

goog.require('io.nfg.core.db.AModel');
goog.require('io.nfg.wmg.models.DeckUnit');
goog.require('io.nfg.wmg.models.PlayerTypes');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @extends {io.nfg.core.db.AModel}
 * @param {Object} data
 */
io.nfg.wmg.models.Actor = function(data) {
  io.nfg.wmg.models.Actor.base(this, 'constructor', data, io.nfg.wmg.models.Actor.__schema, io.nfg.wmg.models.Actor.__defaults);
};
goog.inherits(io.nfg.wmg.models.Actor, io.nfg.core.db.AModel);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.wmg.models.Actor', io.nfg.wmg.models.Actor);


/**
 * @private
 * @const
 * @type {Object}
 */
io.nfg.wmg.models.Actor.__schema = {type:Number, name:String, deck:org.apache.royale.utils.Language.Vector};


/**
 * @private
 * @return {Object}
 */
io.nfg.wmg.models.Actor.__defaults = function() {
  return {type:0};
};


/**
 * @export
 * @override
 */
io.nfg.wmg.models.Actor.prototype.set = function(key, value) {
  if (key == 'deck' && org.apache.royale.utils.Language.is(value, Array))
    value = this.initDeck(value);
  if (key == 'type' && org.apache.royale.utils.Language.is(value, String))
    value = io.nfg.wmg.models.PlayerTypes.NAMES.indexOf(value);
  return io.nfg.wmg.models.Actor.superClass_.set.apply(this, [ key, value] );
};


/**
 * @export
 * @param {Array} data
 * @return {Array}
 */
io.nfg.wmg.models.Actor.prototype.initDeck = function(data) {
  var /** @type {Array} */ deck = [];
  var /** @type {io.nfg.wmg.models.DeckUnit} */ deckUnit;
  var /** @type {*} */ value;
  if (data.length > 0) {
    if (org.apache.royale.utils.Language.is(data[0], Array)) {
      var foreachiter0_target = data;
      for (var foreachiter0 in foreachiter0_target) 
      {
      value = foreachiter0_target[foreachiter0];
      {
        deckUnit = new io.nfg.wmg.models.DeckUnit({type:value[0], upgrades:value[2]});
        deckUnit.merge(value[3]);
        deck.push(deckUnit);
      }}
      
    } else if (org.apache.royale.utils.Language.is(data[0], io.nfg.wmg.models.DeckUnit)) {
      var foreachiter1_target = data;
      for (var foreachiter1 in foreachiter1_target) 
      {
      value = foreachiter1_target[foreachiter1];
      
        deck.push(value);}
      
    } else {
      var foreachiter2_target = data;
      for (var foreachiter2 in foreachiter2_target) 
      {
      value = foreachiter2_target[foreachiter2];
      
        deck.push(new io.nfg.wmg.models.DeckUnit(value));}
      
    }
  }
  return deck;
};


/**
 * @export
 * @param {Array} deck
 * @param {Object} menusConfig
 * @return {Object}
 */
io.nfg.wmg.models.Actor.getGems = function(deck, menusConfig) {
  var /** @type {Object} */ gems = {};
  var foreachiter3_target = menusConfig.magics;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var magic = foreachiter3_target[foreachiter3];
  
    gems[magic] = 0;}
  
  var /** @type {io.nfg.wmg.models.DeckUnit} */ unit;
  var foreachiter4_target = deck;
  for (var foreachiter4 in foreachiter4_target) 
  {
  unit = foreachiter4_target[foreachiter4];
  {
    gems[menusConfig.magics[menusConfig.armies.indexOf(menusConfig.unit_to_army[unit.get('type')])]]++;
  }}
  
  org.apache.royale.utils.Language.trace("gems", JSON.stringify(gems));
  return gems;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.wmg.models.Actor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Actor', qName: 'io.nfg.wmg.models.Actor', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.wmg.models.Actor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'Actor': { type: '', declaredBy: 'io.nfg.wmg.models.Actor', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        'set': { type: 'io.nfg.core.db.AModel', declaredBy: 'io.nfg.wmg.models.Actor', parameters: function () { return [  { index: 1, type: '*', optional: false },{ index: 2, type: '*', optional: false } ]; }},
        'initDeck': { type: 'Vector.<io.nfg.wmg.models.DeckUnit>', declaredBy: 'io.nfg.wmg.models.Actor', parameters: function () { return [  { index: 1, type: 'Array', optional: false } ]; }},
        '|getGems': { type: 'Object', declaredBy: 'io.nfg.wmg.models.Actor', parameters: function () { return [  { index: 1, type: 'Vector.<io.nfg.wmg.models.DeckUnit>', optional: false },{ index: 2, type: 'Object', optional: false } ]; }}
      };
    }
  };
};