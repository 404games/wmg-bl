/**
 * Generated by Apache Royale Compiler from io/nfg/core/events/EventDispatcher.as
 * io.nfg.core.events.EventDispatcher
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.core.events.EventDispatcher');

goog.require('io.nfg.core.events.NFGEvent');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 */
io.nfg.core.events.EventDispatcher = function() {

this._eventStack = [];
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.core.events.EventDispatcher', io.nfg.core.events.EventDispatcher);


/**
 * @private
 * @type {flash.utils.Dictionary}
 */
io.nfg.core.events.EventDispatcher.prototype._eventListeners;


/**
 * @private
 * @type {Array}
 */
io.nfg.core.events.EventDispatcher.prototype._eventStack;


/**
 * @private
 * @type {Array}
 */
io.nfg.core.events.EventDispatcher.sBubbleChains = [];


/**
 * @export
 * @param {string} type
 * @param {Function} listener
 */
io.nfg.core.events.EventDispatcher.prototype.addEventListener = function(type, listener) {
  if (this._eventListeners == null)
    this._eventListeners = new flash.utils.Dictionary();
  var /** @type {Array} */ listeners = org.apache.royale.utils.Language.as(this._eventListeners[type], Array);
  if (listeners == null)
    this._eventListeners[type] = [listener];
  else if (listeners.indexOf(listener) == -1)
    listeners[listeners.length] = listener;
};


/**
 * @export
 * @param {string} type
 * @param {Function} listener
 */
io.nfg.core.events.EventDispatcher.prototype.removeEventListener = function(type, listener) {
  if (this._eventListeners) {
    var /** @type {Array} */ listeners = org.apache.royale.utils.Language.as(this._eventListeners[type], Array);
    var /** @type {number} */ numListeners = listeners ? listeners.length : 0;
    if (numListeners > 0) {
      var /** @type {number} */ index = listeners.indexOf(listener);
      if (index != -1) {
        if (this._eventStack.indexOf(type) == -1) {
          listeners.splice(index, 1);
        } else {
          var /** @type {Array} */ restListeners = listeners.slice(0, index);
          for (var /** @type {number} */ i = index + 1; i < numListeners; ++i)
            restListeners[i - 1] = listeners[i];
          this._eventListeners[type] = restListeners;
        }
      }
    }
  }
};


/**
 * @export
 * @param {string=} type
 */
io.nfg.core.events.EventDispatcher.prototype.removeEventListeners = function(type) {
  type = typeof type !== 'undefined' ? type : null;
  if (type && this._eventListeners)
    delete this._eventListeners[type];
  else
    this._eventListeners = null;
};


/**
 * @export
 * @param {io.nfg.core.events.NFGEvent} event
 */
io.nfg.core.events.EventDispatcher.prototype.dispatchEvent = function(event) {
  var /** @type {boolean} */ bubbles = event.bubbles;
  if (!bubbles && (this._eventListeners == null || !(event.type in this._eventListeners)))
    return;
  var /** @type {io.nfg.core.events.EventDispatcher} */ previousTarget = event.target;
  event.setTarget(this);
  this.invokeEvent(event);
  if (previousTarget)
    event.setTarget(previousTarget);
};


/**
 * @private
 * @param {io.nfg.core.events.NFGEvent} event
 * @return {boolean}
 */
io.nfg.core.events.EventDispatcher.prototype.invokeEvent = function(event) {
  var /** @type {Array} */ listeners = this._eventListeners ? org.apache.royale.utils.Language.as(this._eventListeners[event.type], Array) : null;
  var /** @type {number} */ numListeners = listeners == null ? 0 : listeners.length;
  if (numListeners) {
    event.setCurrentTarget(this);
    this._eventStack[this._eventStack.length] = event.type;
    for (var /** @type {number} */ i = 0; i < numListeners; ++i) {
      var /** @type {Function} */ listener = org.apache.royale.utils.Language.as(listeners[i], Function);
      var /** @type {number} */ numArgs = listener.length;
      if (numArgs == 0)
        listener();
      else if (numArgs == 1)
        listener(event);
      else
        listener(event, event.data);
      if (event.stopsImmediatePropagation)
        return true;
    }
    this._eventStack.pop();
    return event.stopsPropagation;
  }
  else
    return false;
};


/**
 * @export
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {Object=} data
 */
io.nfg.core.events.EventDispatcher.prototype.dispatchEventWith = function(type, bubbles, data) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  data = typeof data !== 'undefined' ? data : null;
  if (bubbles || this.hasEventListener(type)) {
    var /** @type {io.nfg.core.events.NFGEvent} */ event = io.nfg.core.events.NFGEvent.fromPool(type, bubbles, data);
    this.dispatchEvent(event);
    io.nfg.core.events.NFGEvent.toPool(event);
  }
};


/**
 * @export
 * @param {string} type
 * @param {Function=} listener
 * @return {boolean}
 */
io.nfg.core.events.EventDispatcher.prototype.hasEventListener = function(type, listener) {
  listener = typeof listener !== 'undefined' ? listener : null;
  var /** @type {Array} */ listeners = this._eventListeners ? org.apache.royale.utils.Language.as(this._eventListeners[type], Array) : null;
  if (listeners == null)
    return false; else {
    if (listener != null)
      return listeners.indexOf(listener) != -1;
    else
      return listeners.length != 0;
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.core.events.EventDispatcher.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventDispatcher', qName: 'io.nfg.core.events.EventDispatcher', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.core.events.EventDispatcher.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'EventDispatcher': { type: '', declaredBy: 'io.nfg.core.events.EventDispatcher'},
        'addEventListener': { type: 'void', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false } ]; }},
        'removeEventListener': { type: 'void', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false } ]; }},
        'removeEventListeners': { type: 'void', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: true } ]; }},
        'dispatchEvent': { type: 'void', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'io.nfg.core.events.NFGEvent', optional: false } ]; }},
        'dispatchEventWith': { type: 'void', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Boolean', optional: true },{ index: 3, type: 'Object', optional: true } ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'io.nfg.core.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: true } ]; }}
      };
    }
  };
};