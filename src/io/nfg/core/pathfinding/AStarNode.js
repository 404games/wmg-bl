/**
 * Generated by Apache Royale Compiler from io/nfg/core/pathfinding/AStarNode.as
 * io.nfg.core.pathfinding.AStarNode
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.core.pathfinding.AStarNode');

goog.require('io.nfg.core.pathfinding.Prioritizable');



/**
 * @constructor
 * @extends {io.nfg.core.pathfinding.Prioritizable}
 * @param {number=} x
 * @param {number=} y
 */
io.nfg.core.pathfinding.AStarNode = function(x, y) {
  io.nfg.core.pathfinding.AStarNode.base(this, 'constructor');
  x = typeof x !== 'undefined' ? x : 0;
  y = typeof y !== 'undefined' ? y : 0;
  this.setTo(x, y);
};
goog.inherits(io.nfg.core.pathfinding.AStarNode, io.nfg.core.pathfinding.Prioritizable);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.core.pathfinding.AStarNode', io.nfg.core.pathfinding.AStarNode);


/**
 * @export
 * @type {io.nfg.core.pathfinding.AStarNode}
 */
io.nfg.core.pathfinding.AStarNode.prototype.p;


/**
 * @export
 * @type {number}
 */
io.nfg.core.pathfinding.AStarNode.prototype.g = 0;


/**
 * @export
 * @type {number}
 */
io.nfg.core.pathfinding.AStarNode.prototype.gid = 0;


/**
 * @export
 * @type {number}
 */
io.nfg.core.pathfinding.AStarNode.prototype.f = 0;


/**
 * @export
 * @type {number}
 */
io.nfg.core.pathfinding.AStarNode.prototype.position = 0;


/**
 * @export
 * @override
 */
io.nfg.core.pathfinding.AStarNode.prototype.toString = function() {
  return ("#" + this.priority + " - [" + this.x + ", " + this.y + "] - " + this.g + " - " + this.f);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.core.pathfinding.AStarNode.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AStarNode', qName: 'io.nfg.core.pathfinding.AStarNode', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.core.pathfinding.AStarNode.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'p': { type: 'io.nfg.core.pathfinding.AStarNode'},
        'g': { type: 'Number'},
        'gid': { type: 'Number'},
        'f': { type: 'Number'},
        'position': { type: 'Number'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'AStarNode': { type: 'void', declaredBy: 'io.nfg.core.pathfinding.AStarNode', parameters: function () { return [  { index: 1, type: 'Number', optional: true },{ index: 2, type: 'Number', optional: true } ]; }},
        'toString': { type: 'String', declaredBy: 'io.nfg.core.pathfinding.AStarNode'}
      };
    }
  };
};