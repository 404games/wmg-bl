/**
 * Generated by Apache Royale Compiler from io/nfg/core/Pos.as
 * io.nfg.core.Pos
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('io.nfg.core.Pos');



/**
 * @constructor
 * @param {number=} u
 * @param {number=} v
 */
io.nfg.core.Pos = function(u, v) {
  u = typeof u !== 'undefined' ? u : 0;
  v = typeof v !== 'undefined' ? v : 0;
  this.setTo(u, v);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('io.nfg.core.Pos', io.nfg.core.Pos);


/**
 * @export
 * @type {number}
 */
io.nfg.core.Pos.prototype.x = 0;


/**
 * @export
 * @type {number}
 */
io.nfg.core.Pos.prototype.y = 0;


/**
 * @export
 * @param {io.nfg.core.Pos} p
 * @return {boolean}
 */
io.nfg.core.Pos.prototype.equals = function(p) {
  return this.x == p.x && this.y == p.y;
};


/**
 * @export
 * @param {number} u
 * @param {number} v
 */
io.nfg.core.Pos.prototype.setTo = function(u, v) {
  this.x = u;
  this.y = v;
};


/**
 * @export
 * @return {io.nfg.core.Pos}
 */
io.nfg.core.Pos.prototype.clone = function() {
  return new io.nfg.core.Pos(this.x, this.y);
};


/**
 * @export
 * @param {io.nfg.core.Pos} p
 */
io.nfg.core.Pos.prototype.copyFrom = function(p) {
  this.setTo(p.x, p.y);
};


/**
 * @export
 * @param {number} l
 */
io.nfg.core.Pos.prototype.normalize = function(l) {
  if (this.y == 0)
    this.x = this.x < 0 ? -l : l;
  else if (this.x == 0)
    this.y = this.y < 0 ? -l : l; else {
    var /** @type {number} */ m = l / Math.sqrt(this.x * this.x + this.y * this.y);
    this.x *= m;
    this.y *= m;
  }
};


/**
 * @export
 * @param {number} dx
 * @param {number} dy
 */
io.nfg.core.Pos.prototype.offset = function(dx, dy) {
  this.x += dx;
  this.y += dy;
};


/**
 * @export
 * @param {io.nfg.core.Pos} o
 * @return {io.nfg.core.Pos}
 */
io.nfg.core.Pos.prototype.add = function(o) {
  return new io.nfg.core.Pos(this.x + o.x, this.y + o.y);
};


/**
 * @export
 * @param {io.nfg.core.Pos} o
 * @return {io.nfg.core.Pos}
 */
io.nfg.core.Pos.prototype.subtract = function(o) {
  return new io.nfg.core.Pos(this.x - o.x, this.y - o.y);
};


/**
 * @export
 * @return {string}
 */
io.nfg.core.Pos.prototype.toString = function() {
  return 'point(' + this.x + ', ' + this.y + ')';
};


io.nfg.core.Pos.prototype.get__length = function() {
  return Math.sqrt(this.x * this.x + this.y * this.y);
};


Object.defineProperties(io.nfg.core.Pos.prototype, /** @lends {io.nfg.core.Pos.prototype} */ {
/**
  * @export
  * @type {number} */
length: {
get: io.nfg.core.Pos.prototype.get__length}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
io.nfg.core.Pos.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Pos', qName: 'io.nfg.core.Pos', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
io.nfg.core.Pos.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number'},
        'y': { type: 'Number'}
      };
    },
    accessors: function () {
      return {
        'length': { type: 'Number', access: 'readonly', declaredBy: 'io.nfg.core.Pos'}
      };
    },
    methods: function () {
      return {
        'Pos': { type: 'void', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'Number', optional: true },{ index: 2, type: 'Number', optional: true } ]; }},
        'equals': { type: 'Boolean', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'io.nfg.core.Pos', optional: false } ]; }},
        'setTo': { type: 'void', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'clone': { type: 'io.nfg.core.Pos', declaredBy: 'io.nfg.core.Pos'},
        'copyFrom': { type: 'void', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'io.nfg.core.Pos', optional: false } ]; }},
        'normalize': { type: 'void', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'offset': { type: 'void', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'add': { type: 'io.nfg.core.Pos', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'io.nfg.core.Pos', optional: false } ]; }},
        'subtract': { type: 'io.nfg.core.Pos', declaredBy: 'io.nfg.core.Pos', parameters: function () { return [  { index: 1, type: 'io.nfg.core.Pos', optional: false } ]; }},
        'toString': { type: 'String', declaredBy: 'io.nfg.core.Pos'}
      };
    }
  };
};